import cv2
import numpy as np
import easyocr
import serial
import bezier
from collections import deque

# Initialize Serial Communication with ESP32 (Change COMX to your port)
ser = serial.Serial('COMX', 115200)  # Replace 'COMX' with ESP32 port (e.g., 'COM5' or '/dev/ttyUSB0')

# Initialize EasyOCR reader
reader = easyocr.Reader(['en'])

# Initialize drawing canvas
canvas_width, canvas_height = 800, 400
canvas = np.ones((canvas_height, canvas_width), dtype=np.uint8) * 255
recognized_texts = []  # Buffer to store recognized words

# Kalman filter setup
prev_x, prev_y = canvas_width // 2, canvas_height // 2
filtered_x, filtered_y = prev_x, prev_y
kalman_gain = 0.5  # Adjust this for filtering smoothness

# Bezier curve storage
points = deque(maxlen=5)  # Store last few points for smooth curves

def draw_with_imu(x, y):
    global prev_x, prev_y, filtered_x, filtered_y, canvas

    # Apply Kalman filter for smoother motion
    filtered_x = kalman_gain * x + (1 - kalman_gain) * prev_x
    filtered_y = kalman_gain * y + (1 - kalman_gain) * prev_y
    prev_x, prev_y = filtered_x, filtered_y

    # Store recent points for Bezier smoothing
    points.append((int(filtered_x), int(filtered_y)))

    # Draw Bezier curve if enough points are collected
    if len(points) >= 3:
        curve = np.array(points, dtype=np.float32).T
        nodes = bezier.Curve(curve, degree=len(points) - 1)
        for t in np.linspace(0, 1, 10):  # More points for smoothness
            x_new, y_new = nodes.evaluate(t).flatten()
            cv2.circle(canvas, (int(x_new), int(y_new)), 2, (0, 0, 0), -1)

# Recognize text and save to file
def recognize_handwriting():
    global recognized_texts

    # Convert to grayscale and invert colors
    gray = cv2.bitwise_not(canvas)
    cv2.imwrite("temp.png", gray)  # Save the image for OCR

    # Use EasyOCR to recognize handwriting
    result = reader.readtext("temp.png")

    if result:
        words = " ".join([res[1] for res in result])
        recognized_texts.append(words)

# Create window
cv2.namedWindow("Handwriting Pad")

while True:
    # Read IMU data from ESP32
    try:
        imu_data = ser.readline().decode().strip()
        x, y = map(float, imu_data.split(","))  # Parse acceleration values
        draw_with_imu(x, y)  # Draw using IMU movement
    except:
        pass  # Ignore errors

    cv2.imshow("Handwriting Pad", canvas)

    # Display recognized text dynamically
    text_display = np.ones((100, canvas_width), dtype=np.uint8) * 255
    cv2.putText(text_display, f"Recognized: {' '.join(recognized_texts)}", (50, 50),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2, cv2.LINE_AA)
    cv2.imshow("Recognized Text", text_display)

    key = cv2.waitKey(1) & 0xFF

    if key == ord('s'):  # Press 's' to process handwriting
        recognize_handwriting()

    elif key == ord('c'):  # Press 'c' to clear canvas
        canvas[:] = 255

    elif key == ord('q'):  # Press 'q' to quit and save file
        with open("recognized_text.txt", "w", encoding="utf-8") as file:
            file.write(" ".join(recognized_texts))  # Save all text at once
        break

cv2.destroyAllWindows()
